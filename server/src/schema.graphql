scalar DateTime

type Query {
#  info: String!
#  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  items: [Item!],
  item(id: ID!): Item,
  cart(userId: ID!): Cart
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createItem(name: String!, description: String!, priceMinor: Int!): Item!
  createCart: Cart!
  createSpecialUser: User!,
  addItemToCart(itemId: ID!, cartId: ID!): Cart!
  purchaseCart(cartId: ID!, userId: ID!): Purchase
  removeFromCart(cartId: ID!, itemId: ID!): RemoveFromCartResult
}

type RemoveFromCartResult{
  result: Boolean
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: Cart
}

type Item {
  id: ID!
  name: String!
  description: String!
  priceMinor: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Cart {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  items: [Item!]
}

type Purchase {
  id: ID!
  user: User!
  totalMinor: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PurchaseItems {
  id: ID!
  purchase: Purchase!
  item: Item!
  createdAt: DateTime! 
  updatedAt: DateTime!
}